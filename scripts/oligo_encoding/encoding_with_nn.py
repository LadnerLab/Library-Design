#!/usr/bin/env python3
import h2o      # For running models
import argparse # for parsing command-line args
import pandas   # reading csv
import sys
import subprocess

def main():
    arg_parser = argparse.ArgumentParser( description = "Use h2o to select encodings for oligos." )  

    arg_parser.add_argument( '-m', '--model', help = "Trained model that ill be used to predict bindings" )
    arg_parser.add_argument( '-r', '--ratio_file', help = "File containing output produced by oligo_encoding script." )
    arg_parser.add_argument( '-n', '--nn_subset_size', help = "The nn_subset_size number of encodings will be output that "
                                                              "have the smallest nn deviation",
                             default = 3, type = int
                           )
    arg_parser.add_argument( '-o', '--out_file', help = "File to write final encodings out to." )
    arg_parser.add_argument( '-s', '--sequences', help = "File to read sequences generated by the oligo_encoding script" )
    arg_parser.add_argument( '-i', '--input', help = "Input file containing name,seq pairs, the maximum line length is 128" )
    arg_parser.add_argument( '-c', '--cores', help = "Number of cores to use in the oligo_encoding script, default is 2, "
                                                     "as 2 generally has the best performance",
                             type = int,
                             default = 2
                           )
    arg_parser.add_argument( '--subsample', default = 10000, type = int,
                             help = "Number of randomly generated encodings to subsample" )

    arg_parser.add_argument( '--gc_target', type = float, default = 0.55, help = "Target gc ratio for generated seqs"
                             "The first subsample number of encodings to take will be those with minimum absolute value "
                             "difference from gc_target."
                           )
    arg_parser.add_argument( '-p', '--probability_file', help = "probability_file: lines must be formatted as {letter},"
                                                                "{nucleotides,3},{weighting},{index}. "
                                                                "The weightings do not need to sum to 1. Codon indices must range from 0 to 63.\n"
                           );
    arg_parser.add_argument( '-t', '--trials', type = int, default = 10000, help = "Number of trials to perform. For each sequence in sequences, trials number of "
                                                                       "candidate encodings will be created."
                           )

    args = arg_parser.parse_args()

    if args.input:
        generate_oligos( args )

    h2o.init()

    loaded_model = h2o.load_model( args.model )

    generated_sequences      = read_seq_file( args.sequences )
    ratio_with_labelled_cols = read_ratio_and_label( args.ratio_file )

    predictions = loaded_model.predict( h2o.H2OFrame( ratio_with_labelled_cols ) )

    generated_sequences[ 'predicted' ]     = predictions.as_data_frame()
    generated_sequences[ 'predicted_dev' ] = predictions.abs().as_data_frame()

    best_encodings = get_n_best_encodings( generated_sequences, 'AA Peptide', args.nn_subset_size )

    write_output( best_encodings, args.out_file )

def generate_oligos( args ):
    subprocess.call( "./main -i %s -s %s -r %s -p %s -n %d -g %f -t %d -c %d" %
                     ( args.input, args.sequences, args.ratio_file, args.probability_file, args.subsample, args.gc_target, args.trials, args.cores ),
                     shell = True
                   )
    
def write_output( encodings, outfile_name ):
    encodings.to_csv( outfile_name, index = False )

def get_n_best_encodings( seqs_dataframe, key, n ):
    out_frame = pandas.DataFrame()
    unique_seqs = get_unique_seqs( seqs_dataframe, key )
    for seq_id in unique_seqs:
        relevant_data = seqs_dataframe[ seqs_dataframe[ key ].str.contains( seq_id ) ]
        sorted_data   = relevant_data.sort_values( 'predicted_dev' )
        out_frame     = out_frame.append( sorted_data.iloc[ 0:n ] )
    return out_frame

def get_unique_seqs( dataframe, key ):
    return set( dataframe[ key ] )
def read_ratio_and_label( filename ):
    parsed_file = pandas.read_csv( filename )

    parsed_file.columns = [ "C" + str( item ) for item in range( 1442,1530 ) ]

    return parsed_file

def read_seq_file( filename ):
    parsed_file = pandas.read_csv( filename )
    parsed_file.columns = [ "Seq ID", "AA Peptide", "Nucleotide Encoding",
                            "GC Ratio", "GC Dev (abs)"
                          ]

    return parsed_file


if __name__ == '__main__':
    main()
