#!/usr/bin/env python3
import h2o      # For running models
import argparse # for parsing command-line args
import pandas   # reading csv
import sys

def main():
    arg_parser = argparse.ArgumentParser( description = "Use h2o to select encodings for oligos." )  

    arg_parser.add_argument( '-m', '--model', help = "Trained model that ill be used to predict bindings" )
    arg_parser.add_argument( '-r', '--ratio_file', help = "File containing output produced by oligo_encoding script." )
    arg_parser.add_argument( '-n', '--nn_subset_size', help = "The nn_subset_size number of encodings will be output that "
                                                              "have the smallest nn deviation",
                             default = 3
                           )
    arg_parser.add_argument( '-o', '--out_file', help = "File to write final encodings out to." )
    arg_parser.add_argument( '-s', '--sequences', help = "File to read sequences generated by the oligo_encoding script" )

    args = arg_parser.parse_args()

    h2o.init()

    loaded_model = h2o.load_model( args.model )

    generated_sequences      = read_seq_file( args.sequences )
    ratio_with_labelled_cols = read_ratio_and_label( args.ratio_file )

    predictions = loaded_model.predict( h2o.H2OFrame( ratio_with_labelled_cols ) )


def read_ratio_and_label( filename ):
    parsed_file = pandas.read_csv( filename )

    parsed_file.columns = [ "C" + str( item ) for item in range( 1442,1530 ) ]

    return parsed_file

def read_seq_file( filename ):
    parsed_file = pandas.read_csv( filename )
    parsed_file.columns = [ "Seq ID", "AA Peptide", "Nucleotide Encoding" ]

    return parsed_file


if __name__ == '__main__':
    main()
