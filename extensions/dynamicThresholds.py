#!/usr/bin/env python3

# By Jason Ladner

# Reads in results from SW_SC.py and combines together designs from multiple clusters by implementing dynamic Xmer coverage thresholds based on cluster redundancy

import argparse, glob, os
import inout as io               #Available at https://github.com/jtladner/Modules
import fastatools as ft          #Available at https://github.com/jtladner/Modules

# Generate a list of peptide names to include, given an Xmer coverage threshold
def subsetPepFastaD(fastaF, manifestF, thresh):
    fD = ft.read_fasta_dict_upper(fastaF)
    mD = io.fileDictHeader(manifestF, "Peptide", "XmerPropPriorToAdding")
    
    outD = {k:v for k,v in fD.items() if float(mD[k]) <= thresh}
    return outD
    

def readThreshMap(mapF):
    threshMapD = {}
    with open(mapF, "r") as fin:
        for line in fin:
            cols = line.rstrip("\n").split("\t")
            if len(cols) != 3:
                print("Expected three columns in xmerThreshMap file, found: %s" % (line))
            else:
                cols = [float(x) for x in cols]
                threshMapD[(cols[0], cols[1])] = cols[2]
    return threshMapD

def avgTargetsPerKmer(fasta, k, exSet=set("X-")):
    cD = kt.kmerDictCountFasta(fasta,k,filter=exSet)  
    avgProp = np.mean(list(cD.values()))
    return avgProp

def getThresh(size, threshD):
    for k,v in threshD.items():
        if k[0] <= size < k[1]:
            return(v)
    print("Didn't find a matching threshold for size:", size)

def main():

    #To parse command line
    p = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    
    p.add_argument('--pepsPerCluster', help='Use this option if you want to output a file recoridng the number of peptides included per cluster. The argument should be the file path to use for the output.')
    p.add_argument('-f', '--pepFasSuffix', default=".fasta", help='Expected suffix for fasta files containing designed peptides (from SW_SC.py).')
    p.add_argument('-m', '--manifestSuffix', default="-manifest.tsv", help='Expected suffix for manifest files containing Xmer thresh info for designed peptides (from SW_SC.py).')
    p.add_argument('-t', '--xmerThreshMap', help='File containing Xmer coverage thresholds to use for clusters based on Xmer redundancy in each cluster. Should be tab delimited and each row should have three columns: Starting XmerProp, Ending XmerProp, XmerThresh. If not provided, a default set of thresholds will be used. No header row is expected. Order must be as specified here.')
    p.add_argument('-x', '--avgXmer', help='File containing average Xmer proportions for each cluster, as generated by avgKmerProp.py. If not provided, these will be calculcated on the fly, which will extend run time.')
    p.add_argument('-s', '--xmerSize', type=int, default=9, help='Xmer size of interest.')
#    p.add_argument('--avgXmer_fileCol', default="File", help='Header name in --avgXmer file corresponding to the cluster file name.')
#    p.add_argument('--avgXmer_avgCol', default="Avg9mers", help='Header name in --avgXmer file corresponding to the avgXmer value of interest.')

    reqArgs = p.add_argument_group('required arguments')
    reqArgs.add_argument('-d', '--dir', help='Path to directory containing designs from SW_SC.py.', required=True)
    reqArgs.add_argument('-o', '--out', help='Name for output file that will contain selected peptides from each cluster.', required=True)

    args = p.parse_args()
    
    # Create dict for combo fasta file, and counters for tracking what gets added
    comboFastaD = {}
    clustersAdded = 0
    
    # Read in Xmer coverage map, if provided
    if args.xmerThreshMap:
        threshMapD = readThreshMap(args.xmerThreshMap)
    # If not provides, use the default map and print this map to the screen
    else:
        threshMapD = {
                (1,1.5):0.90, (1.5,2):0.80, (2,3):0.70, (3,4):0.60, (4,5):0.50, (5,10):0.40,
                (10, 15):0.30, (15, 50):0.20, (50, 100):0.15, (100, 200):0.10, (200, 10000000):0.05,
            }
        print("Using default Xmer Threshold Map:")
        for k,v in threshMapD.items():
            print("%.3f - %.3f: %.3f" % (k[0], k[1], v))

    #Read in avg # seqs per cluster containing each Xmer, if provided
    if args.avgXmer:
        avgXmerD = io.fileDictHeader(args.avgXmer, "File", "Avg%dmers" % (args.xmerSize), valType="float")
    
    # Open optional output file, if requested
    if args.pepsPerCluster:
        perPep = open(args.pepsPerCluster, "w")
        perPep.write("Cluster\tNumPeptidesInDesign\n")
    
    #Get fasta file paths
    fastaL = glob.glob("%s/*%s" % (args.dir, args.pepFasSuffix))
    fastaD = {os.path.basename(x).split("_SWSC")[0]:x for x in fastaL}

    #Get manifest file paths
    maniL = glob.glob("%s/*%s" % (args.dir, args.manifestSuffix))
    maniD = {os.path.basename(x).split("_SWSC")[0]:x for x in maniL}
    
    if len(maniD) > len(fastaD):
        print("Found more manifests than fasta files! (fastas: %d, manifests: %d)" % (len(fastaD), len(maniD)))
    elif len(maniD) < len(fastaD):
        print("Found more fasta files than manifests! (fastas: %d, manifests: %d)" % (len(fastaD), len(maniD)))
    
    for k,v in fastaD.items():
        if k not in maniD:
            print("Didn't find a manifest file for %s" % (k))
        else:
            if not args.avgXmer:
                axm = avgTargetsPerKmer(v, args.xmerSize, exSet=set("X-"))
            else:
                if k not in avgXmerD:
                    print("%s not in --avgXmer file, setting avgXmer value to 1.")
                    axm = 1
                else:
                    axm = avgXmerD[k]
            
            thisFastaD = subsetPepFastaD(v, maniD[k], getThresh(axm, threshMapD))
            
            # If requested, write out number of peptides selected for this cluster
            if args.pepsPerCluster:
                perPep.write("%s\t%s\n" % (k, len(thisFastaD)))
            
            for n,s in thisFastaD.items():
                comboFastaD[n] = s
            clustersAdded+=1
    
    #Write out combo fasta file
    ft.write_fasta_dict(comboFastaD, args.out)
    print("Combo fasta file included %d peptides" % (len(comboFastaD)))
    print("Combo fasta file included peptides from %d clusters" % (clustersAdded))

###-----------------End of main()--------------------------->>>

###------------->>>

if __name__ == "__main__":
    main()
