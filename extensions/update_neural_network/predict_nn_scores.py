import h2o
import argparse
import pandas as pd

# Use nucleotide/amino acid feature matrix to predict zscores using an h2o Neural Network model
# NOTE: Start h2o cluster before running this script 

NUM_COLUMNS = 88
H2O_COL_NAMES = [f"C{i}" for i in range(3, NUM_COLUMNS+3)]
#H2O_COL_NAMES = [ "C" + str( item ) for item in range( 1442,1530 ) ]

def main():
    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    reqArgs = parser.add_argument_group('Required Arguments')
    reqArgs.add_argument('-i', '--input_matrix', help='Tab-delimited prediction matrix generated by generate_nn_features.py. ' \
            f'Should be {NUM_COLUMNS-1} columns column 0 being the sequence name and columns 1:{NUM_COLUMNS} being the features.', required=True)
    reqArgs.add_argument( '-m', '--model', help = "Filepath to trained model that will be used to predict bindings", required=True )
    reqArgs.add_argument('-o', '--output_path', help='Filepath to output predicted scores file.', required=True)

    args = parser.parse_args()

    h2o_predict(args.input_matrix, args.model, args.output_path)


def h2o_predict(input_matrix, model, output_path):
    predicted_data = list()

    # read in input matrix
    encoding_data = pd.read_csv(input_matrix, sep="\t", header=None, index_col=0)

    h2o.init()

    # load in the model
    loaded_model = h2o.load_model( model )

    print("Predicting...")

    hf = h2o.H2OFrame(encoding_data)
    hf.set_names(H2O_COL_NAMES)
    predictions = loaded_model.predict(hf)
    predicted_data = list(zip(encoding_data.index.to_list(), predictions.as_data_frame(use_pandas=True)["predict"].to_list()))

    pd.DataFrame(
        predicted_data, 
        columns=["Sequence name", "Predicted Z Score"]
        ).set_index(
            "Sequence name"
        ).to_csv(
            output_path, sep="\t"
        )

if __name__ == "__main__":
    main()